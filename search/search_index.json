{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Azure Datalake Utils \u00b6 Utilidades para interactuar con Azure Datalake. El objetivo es evitar que personas denominadas cientificos ciuidanos tengan que interactuar con librerias, que no son, totalmente relacionadas con el analisis de datos. La hipotesis detras de este pensamiento es que se puede lograr incrementar la adopci\u00f3n de estas herramientas si se facilitan y simplifica la interacci\u00f3n de pandas con la lectura del datalake. Documentation: https://centraal-api.github.io/azure-datalake-utils GitHub: https://github.com/centraal-api/azure-datalake-utils PyPI: https://pypi.org/project/azure-datalake-utils/ Free software: Apache-2.0 Features \u00b6 Control de autenticaci\u00f3n directamente con el Directorio activo de Azure. Lectura de archivos csv y excel, de una forma m\u00e1s concisa. Publicar nueva version \u00b6 Seguir checklist del template orginal . Credits \u00b6 La librer\u00eda es creada y mantenida por Centraal Studio . Centraal Studio Agredece la alianza con Haceb , cuyos retos internos de democratizar el acceso a informaci\u00f3n han motivado la creaci\u00f3n de esta librer\u00eda. // This package is created and mantained by Centraal Studio . Centraal Studio appreciate the alliance with Haceb , which internal efforts to democratize the access of company information has motivated the creation of the library. This package was created with Cookiecutter and the waynerv/cookiecutter-pypackage project template.","title":"Home"},{"location":"#azure-datalake-utils","text":"Utilidades para interactuar con Azure Datalake. El objetivo es evitar que personas denominadas cientificos ciuidanos tengan que interactuar con librerias, que no son, totalmente relacionadas con el analisis de datos. La hipotesis detras de este pensamiento es que se puede lograr incrementar la adopci\u00f3n de estas herramientas si se facilitan y simplifica la interacci\u00f3n de pandas con la lectura del datalake. Documentation: https://centraal-api.github.io/azure-datalake-utils GitHub: https://github.com/centraal-api/azure-datalake-utils PyPI: https://pypi.org/project/azure-datalake-utils/ Free software: Apache-2.0","title":"Azure Datalake Utils"},{"location":"#features","text":"Control de autenticaci\u00f3n directamente con el Directorio activo de Azure. Lectura de archivos csv y excel, de una forma m\u00e1s concisa.","title":"Features"},{"location":"#publicar-nueva-version","text":"Seguir checklist del template orginal .","title":"Publicar nueva version"},{"location":"#credits","text":"La librer\u00eda es creada y mantenida por Centraal Studio . Centraal Studio Agredece la alianza con Haceb , cuyos retos internos de democratizar el acceso a informaci\u00f3n han motivado la creaci\u00f3n de esta librer\u00eda. // This package is created and mantained by Centraal Studio . Centraal Studio appreciate the alliance with Haceb , which internal efforts to democratize the access of company information has motivated the creation of the library. This package was created with Cookiecutter and the waynerv/cookiecutter-pypackage project template.","title":"Credits"},{"location":"api/","text":"Interactua con el datalake. Modulos exportados por este paquete. Datalake : Clase principal para interactuar con el datalake. Main module. Datalake \u00b6 Bases: object Clase para representar operaciones de Datalake. __init__ ( datalake_name , tenant_id , account_key = None ) \u00b6 Clase para interactuar con Azure Dalake. Parameters: Name Type Description Default datalake_name str nombre de la cuenta de Azure Datalake Gen2. required tenant_id str Identificador del tenant, es valor es proporcionado por arquitectura de datos, debe conservarse para un correcto funcionamiento. required account_key Optional [ str ] key de la cuenta. Por defecto es None y es ignorado None from_account_key ( datalake_name , account_key ) classmethod \u00b6 Opcion de inicializar con account key. read_csv ( ruta , ** kwargs ) \u00b6 Leer un archivo CSV desde la cuenta de datalake. Esta funci\u00f3n hace una envoltura de pd.read_csv . usar la documentaci\u00f3n de la funci\u00f3n para determinar parametros adicionales. Parameters: Name Type Description Default ruta str Ruta a leeder el archivo, debe contener una referencia a un archivo .csv o .txt . Recordar que la ruta debe contener esta estructura: {NOMBRE_CONTENEDOR}/{RUTA}/{nombre o patron}.csv . required **kwargs Optional [ Any ] argumentos a pasar a pd.read_csv. El unico argumento que es ignorado es storage_options. {} Returns: Type Description pd . DataFrame Dataframe con la informacion del la ruta. read_excel ( ruta , ** kwargs ) \u00b6 Leer un archivo Excel desde la cuenta de datalake. Esta funci\u00f3n hace una envoltura de [pd.read_excel]. Por favor usar la documentaci\u00f3n de la funci\u00f3n para determinar parametros adicionales. [[pd.read_excel]]:(https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.read_excel.html) Parameters: Name Type Description Default ruta str Ruta a leeder el archivo, debe contener una referencia a un archivo .xlsx o .xls . Recordar que la ruta debe contener esta estructura: {NOMBRE_CONTENEDOR}/{RUTA}/{nombre o patron}.xlsx . required **kwargs Optional [ Any ] argumentos a pasar a pd.read_excel. {} Returns: Type Description pd . DataFrame Dataframe con la informacion del la ruta. read_json ( ruta , ** kwargs ) \u00b6 Leer un archivo Json desde la cuenta de datalake. Esta funci\u00f3n hace una envoltura de [pd.read_json]. Por favor usar la documentaci\u00f3n de la funci\u00f3n para determinar parametros adicionales. [[pd.read_json]]:(https://pandas.pydata.org/docs/reference/api/pandas.read_json.html) Parameters: Name Type Description Default ruta str Ruta a leeder el archivo, debe contener una referencia a un archivo .json . Recordar que la ruta debe contener esta estructura: {NOMBRE_CONTENEDOR}/{RUTA}/{nombre o patron}.json . required **kwargs Optional [ Any ] argumentos a pasar a pd.read_json. {} Returns: Type Description pd . DataFrame Dataframe con la informacion del la ruta. write_csv ( df , ruta , ** kwargs ) \u00b6 Escribir al archivo. write_excel ( df , ruta , ** kwargs ) \u00b6 Escribir al archivo al datalake. write_json ( df , ruta , ** kwargs ) \u00b6 Escribir al archivo al datalake.","title":"Modules"},{"location":"api/#azure_datalake_utils.azure_datalake_utils.Datalake","text":"Bases: object Clase para representar operaciones de Datalake.","title":"Datalake"},{"location":"api/#azure_datalake_utils.azure_datalake_utils.Datalake.__init__","text":"Clase para interactuar con Azure Dalake. Parameters: Name Type Description Default datalake_name str nombre de la cuenta de Azure Datalake Gen2. required tenant_id str Identificador del tenant, es valor es proporcionado por arquitectura de datos, debe conservarse para un correcto funcionamiento. required account_key Optional [ str ] key de la cuenta. Por defecto es None y es ignorado None","title":"__init__()"},{"location":"api/#azure_datalake_utils.azure_datalake_utils.Datalake.from_account_key","text":"Opcion de inicializar con account key.","title":"from_account_key()"},{"location":"api/#azure_datalake_utils.azure_datalake_utils.Datalake.read_csv","text":"Leer un archivo CSV desde la cuenta de datalake. Esta funci\u00f3n hace una envoltura de pd.read_csv . usar la documentaci\u00f3n de la funci\u00f3n para determinar parametros adicionales. Parameters: Name Type Description Default ruta str Ruta a leeder el archivo, debe contener una referencia a un archivo .csv o .txt . Recordar que la ruta debe contener esta estructura: {NOMBRE_CONTENEDOR}/{RUTA}/{nombre o patron}.csv . required **kwargs Optional [ Any ] argumentos a pasar a pd.read_csv. El unico argumento que es ignorado es storage_options. {} Returns: Type Description pd . DataFrame Dataframe con la informacion del la ruta.","title":"read_csv()"},{"location":"api/#azure_datalake_utils.azure_datalake_utils.Datalake.read_excel","text":"Leer un archivo Excel desde la cuenta de datalake. Esta funci\u00f3n hace una envoltura de [pd.read_excel]. Por favor usar la documentaci\u00f3n de la funci\u00f3n para determinar parametros adicionales. [[pd.read_excel]]:(https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.read_excel.html) Parameters: Name Type Description Default ruta str Ruta a leeder el archivo, debe contener una referencia a un archivo .xlsx o .xls . Recordar que la ruta debe contener esta estructura: {NOMBRE_CONTENEDOR}/{RUTA}/{nombre o patron}.xlsx . required **kwargs Optional [ Any ] argumentos a pasar a pd.read_excel. {} Returns: Type Description pd . DataFrame Dataframe con la informacion del la ruta.","title":"read_excel()"},{"location":"api/#azure_datalake_utils.azure_datalake_utils.Datalake.read_json","text":"Leer un archivo Json desde la cuenta de datalake. Esta funci\u00f3n hace una envoltura de [pd.read_json]. Por favor usar la documentaci\u00f3n de la funci\u00f3n para determinar parametros adicionales. [[pd.read_json]]:(https://pandas.pydata.org/docs/reference/api/pandas.read_json.html) Parameters: Name Type Description Default ruta str Ruta a leeder el archivo, debe contener una referencia a un archivo .json . Recordar que la ruta debe contener esta estructura: {NOMBRE_CONTENEDOR}/{RUTA}/{nombre o patron}.json . required **kwargs Optional [ Any ] argumentos a pasar a pd.read_json. {} Returns: Type Description pd . DataFrame Dataframe con la informacion del la ruta.","title":"read_json()"},{"location":"api/#azure_datalake_utils.azure_datalake_utils.Datalake.write_csv","text":"Escribir al archivo.","title":"write_csv()"},{"location":"api/#azure_datalake_utils.azure_datalake_utils.Datalake.write_excel","text":"Escribir al archivo al datalake.","title":"write_excel()"},{"location":"api/#azure_datalake_utils.azure_datalake_utils.Datalake.write_json","text":"Escribir al archivo al datalake.","title":"write_json()"},{"location":"changelog/","text":"Changelog \u00b6 0.3.1 - 2022-09-05 \u00b6 Added \u00b6 Limpieza de columnas antes de escribir csv. 0.3.0 - 2022-09-05 \u00b6 Added \u00b6 Soporte python 3.10 Fix para credenciales en Windows Escritura y lectura de Json 0.2.0 - 2022-08-31 \u00b6 Added \u00b6 Primera version util con lectura de excel y csv Adicionar ejemplos de como hacer testing 0.1.1 - 2022-08-30 \u00b6 Added \u00b6 inlcuir primera utilidad 0.0.1 (2022-08-30) \u00b6 First release on PyPI.","title":"Changelog"},{"location":"changelog/#changelog","text":"","title":"Changelog"},{"location":"changelog/#031---2022-09-05","text":"","title":"0.3.1 - 2022-09-05"},{"location":"changelog/#added","text":"Limpieza de columnas antes de escribir csv.","title":"Added"},{"location":"changelog/#030---2022-09-05","text":"","title":"0.3.0 - 2022-09-05"},{"location":"changelog/#added_1","text":"Soporte python 3.10 Fix para credenciales en Windows Escritura y lectura de Json","title":"Added"},{"location":"changelog/#020---2022-08-31","text":"","title":"0.2.0 - 2022-08-31"},{"location":"changelog/#added_2","text":"Primera version util con lectura de excel y csv Adicionar ejemplos de como hacer testing","title":"Added"},{"location":"changelog/#011---2022-08-30","text":"","title":"0.1.1 - 2022-08-30"},{"location":"changelog/#added_3","text":"inlcuir primera utilidad","title":"Added"},{"location":"changelog/#001-2022-08-30","text":"First release on PyPI.","title":"0.0.1 (2022-08-30)"},{"location":"contributing/","text":"Contributing \u00b6 Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given. You can contribute in many ways: Types of Contributions \u00b6 Report Bugs \u00b6 Report bugs at https://github.com/centraal-api/azure-datalake-utils/issues. If you are reporting a bug, please include: Your operating system name and version. Any details about your local setup that might be helpful in troubleshooting. Detailed steps to reproduce the bug. Fix Bugs \u00b6 Look through the GitHub issues for bugs. Anything tagged with \"bug\" and \"help wanted\" is open to whoever wants to implement it. Implement Features \u00b6 Look through the GitHub issues for features. Anything tagged with \"enhancement\" and \"help wanted\" is open to whoever wants to implement it. Write Documentation \u00b6 azure_datalake_utils could always use more documentation, whether as part of the official azure_datalake_utils docs, in docstrings, or even on the web in blog posts, articles, and such. Submit Feedback \u00b6 The best way to send feedback is to file an issue at https://github.com/centraal-api/azure_datalake_utils/issues. If you are proposing a feature: Explain in detail how it would work. Keep the scope as narrow as possible, to make it easier to implement. Remember that this is a volunteer-driven project, and that contributions are welcome :) Get Started! \u00b6 Ready to contribute? Here's how to set up azure_datalake_utils for local development. Fork the azure_datalake_utils repo on GitHub. Clone your fork locally $ git clone git@github.com:your_name_here/azure-datalake-utils.git Ensure poetry is installed. Install dependencies and start your virtualenv: $ poetry install -E test -E doc -E dev Create a branch for local development: $ git checkout -b name-of-your-bugfix-or-feature Now you can make your changes locally. When you're done making changes, check that your changes pass the tests, including testing other Python versions, with tox: $ poetry run tox Commit your changes and push your branch to GitHub: $ git add . $ git commit -m \"Your detailed description of your changes.\" $ git push origin name-of-your-bugfix-or-feature Submit a pull request through the GitHub website. Pull Request Guidelines \u00b6 Before you submit a pull request, check that it meets these guidelines: The pull request should include tests. If the pull request adds functionality, the docs should be updated. Put your new functionality into a function with a docstring, and add the feature to the list in README.md. The pull request should work for Python 3.8, 3.9. 1.10 Check https://github.com/centraal-api/azure-datalake-utils/actions and make sure that the tests pass for all supported Python versions. Tips \u00b6 $ poetry run pytest tests/test_azure_datalake_utils.py To run a subset of tests. Deploying \u00b6 A reminder for the maintainers on how to deploy. Make sure all your changes are committed (including an entry in CHANGELOG.md). Then run: $ poetry run bump2version patch # possible: major / minor / patch $ git push $ git push --tags GitHub Actions will then deploy to PyPI if tests pass. Note for maintaniners \u00b6 In the first versions the dependencies are not stable, for 2 reasons: the versions suggested in the initial template were not fully compatible with the objectives of the library. Some dependencies related to document creation and especially adlfs library and fsspec are not fully understood very well. For the above reasons, in some cases, the release workflow could not work, and to avoid creating patch versions the maintainer may need to \"recycle\" a tag, please follow this gist: git push origin :{tag} git tag -d {tag} git tag {tag} git push origin {tag}","title":"Contributing"},{"location":"contributing/#contributing","text":"Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given. You can contribute in many ways:","title":"Contributing"},{"location":"contributing/#types-of-contributions","text":"","title":"Types of Contributions"},{"location":"contributing/#report-bugs","text":"Report bugs at https://github.com/centraal-api/azure-datalake-utils/issues. If you are reporting a bug, please include: Your operating system name and version. Any details about your local setup that might be helpful in troubleshooting. Detailed steps to reproduce the bug.","title":"Report Bugs"},{"location":"contributing/#fix-bugs","text":"Look through the GitHub issues for bugs. Anything tagged with \"bug\" and \"help wanted\" is open to whoever wants to implement it.","title":"Fix Bugs"},{"location":"contributing/#implement-features","text":"Look through the GitHub issues for features. Anything tagged with \"enhancement\" and \"help wanted\" is open to whoever wants to implement it.","title":"Implement Features"},{"location":"contributing/#write-documentation","text":"azure_datalake_utils could always use more documentation, whether as part of the official azure_datalake_utils docs, in docstrings, or even on the web in blog posts, articles, and such.","title":"Write Documentation"},{"location":"contributing/#submit-feedback","text":"The best way to send feedback is to file an issue at https://github.com/centraal-api/azure_datalake_utils/issues. If you are proposing a feature: Explain in detail how it would work. Keep the scope as narrow as possible, to make it easier to implement. Remember that this is a volunteer-driven project, and that contributions are welcome :)","title":"Submit Feedback"},{"location":"contributing/#get-started","text":"Ready to contribute? Here's how to set up azure_datalake_utils for local development. Fork the azure_datalake_utils repo on GitHub. Clone your fork locally $ git clone git@github.com:your_name_here/azure-datalake-utils.git Ensure poetry is installed. Install dependencies and start your virtualenv: $ poetry install -E test -E doc -E dev Create a branch for local development: $ git checkout -b name-of-your-bugfix-or-feature Now you can make your changes locally. When you're done making changes, check that your changes pass the tests, including testing other Python versions, with tox: $ poetry run tox Commit your changes and push your branch to GitHub: $ git add . $ git commit -m \"Your detailed description of your changes.\" $ git push origin name-of-your-bugfix-or-feature Submit a pull request through the GitHub website.","title":"Get Started!"},{"location":"contributing/#pull-request-guidelines","text":"Before you submit a pull request, check that it meets these guidelines: The pull request should include tests. If the pull request adds functionality, the docs should be updated. Put your new functionality into a function with a docstring, and add the feature to the list in README.md. The pull request should work for Python 3.8, 3.9. 1.10 Check https://github.com/centraal-api/azure-datalake-utils/actions and make sure that the tests pass for all supported Python versions.","title":"Pull Request Guidelines"},{"location":"contributing/#tips","text":"$ poetry run pytest tests/test_azure_datalake_utils.py To run a subset of tests.","title":"Tips"},{"location":"contributing/#deploying","text":"A reminder for the maintainers on how to deploy. Make sure all your changes are committed (including an entry in CHANGELOG.md). Then run: $ poetry run bump2version patch # possible: major / minor / patch $ git push $ git push --tags GitHub Actions will then deploy to PyPI if tests pass.","title":"Deploying"},{"location":"contributing/#note-for-maintaniners","text":"In the first versions the dependencies are not stable, for 2 reasons: the versions suggested in the initial template were not fully compatible with the objectives of the library. Some dependencies related to document creation and especially adlfs library and fsspec are not fully understood very well. For the above reasons, in some cases, the release workflow could not work, and to avoid creating patch versions the maintainer may need to \"recycle\" a tag, please follow this gist: git push origin :{tag} git tag -d {tag} git tag {tag} git push origin {tag}","title":"Note for maintaniners"},{"location":"installation/","text":"Installation \u00b6 Stable release \u00b6 To install azure_datalake_utils, run this command in your terminal: $ pip install azure_datalake_utils This is the preferred method to install azure_datalake_utils, as it will always install the most recent stable release. If you don't have pip installed, this Python installation guide can guide you through the process. From source \u00b6 The source for azure_datalake_utils can be downloaded from the Github repo . You can either clone the public repository: $ git clone git://github.com/centraal-api/azure-datalake-utils Or download the tarball : $ curl -OJL https://github.com/centraal-api/azure-datalake-utils/tarball/master Once you have a copy of the source, you can install it with: $ pip install .","title":"Installation"},{"location":"installation/#installation","text":"","title":"Installation"},{"location":"installation/#stable-release","text":"To install azure_datalake_utils, run this command in your terminal: $ pip install azure_datalake_utils This is the preferred method to install azure_datalake_utils, as it will always install the most recent stable release. If you don't have pip installed, this Python installation guide can guide you through the process.","title":"Stable release"},{"location":"installation/#from-source","text":"The source for azure_datalake_utils can be downloaded from the Github repo . You can either clone the public repository: $ git clone git://github.com/centraal-api/azure-datalake-utils Or download the tarball : $ curl -OJL https://github.com/centraal-api/azure-datalake-utils/tarball/master Once you have a copy of the source, you can install it with: $ pip install .","title":"From source"},{"location":"usage/","text":"Usage \u00b6 To use azure_datalake_utils in a project import azure_datalake_utils","title":"Usage"},{"location":"usage/#usage","text":"To use azure_datalake_utils in a project import azure_datalake_utils","title":"Usage"}]}